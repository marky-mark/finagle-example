/**
 * Generated by Scrooge
 *   version: ?
 *   rev: ?
 *   built at: ?
 */
package com.twitter.finagle.example.thriftjava

import com.twitter.scrooge.{
  ThriftService, ThriftStruct, ThriftStructCodec, ThriftStructCodec3}
import java.nio.ByteBuffer
import org.apache.thrift.protocol._
import org.apache.thrift.transport.TTransport
import org.apache.thrift.TApplicationException
import org.apache.thrift.transport.TMemoryBuffer
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"), date = "2015-05-05T11:57:31.947+0100")
trait Hello[+MM[_]] extends ThriftService {
  
  def hi(): MM[String]
}


object Hello {
  
  object hi$args extends ThriftStructCodec3[hi$args] {
    val Struct = new TStruct("hi_args")
  
    /**
     * Checks that all required fields are non-null.
     */
    def validate(_item: hi$args) {
    }
  
    override def encode(_item: hi$args, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): hi$args = Immutable.decode(_iprot)
  
    def apply(
    ): hi$args = new Immutable(
    )
  
    def unapply(_item: hi$args): Boolean = true
  
    object Immutable extends ThriftStructCodec3[hi$args] {
      override def encode(_item: hi$args, _oproto: TProtocol) { _item.write(_oproto) }
      override def decode(_iprot: TProtocol): hi$args = {
        var _done = false
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case _ =>
                TProtocolUtil.skip(_iprot, _field.`type`)
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
        new Immutable(
        )
      }
    }
  
    /**
     * The default read-only implementation of hi$args.  You typically should not need to
     * directly reference this class; instead, use the hi$args.apply method to construct
     * new instances.
     */
    class Immutable(
    ) extends hi$args
  
  }
  
  trait hi$args extends ThriftStruct
    with Product
    with java.io.Serializable
  {
    import hi$args._
  
  
  
  
  
    /**
     * If the specified field is optional, it is set to None.  Otherwise, if the field is
     * known, it is reverted to its default value; if the field is unknown, it is subtracked
     * from the passthroughFields map, if present.
     */
    def unsetField(_fieldId: Short): hi$args =
      _fieldId match {
        case _ => this
      }
  
    override def write(_oprot: TProtocol) {
      hi$args.validate(this)
      _oprot.writeStructBegin(Struct)
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  
    def copy(
    ): hi$args =
      new Immutable(
      )
  
    override def canEqual(other: Any): Boolean = other.isInstanceOf[hi$args]
  
    override def equals(other: Any): Boolean =
      _root_.scala.runtime.ScalaRunTime._equals(this, other)
  
    override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
  
    override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
  
  
    override def productArity: Int = 0
  
    override def productElement(n: Int): Any = n match {
      case _ => throw new IndexOutOfBoundsException(n.toString)
    }
  
    override def productPrefix: String = "hi$args"
  }
  
  object hi$result extends ThriftStructCodec3[hi$result] {
    val Struct = new TStruct("hi_result")
    val SuccessField = new TField("success", TType.STRING, 0)
    val SuccessFieldManifest = implicitly[Manifest[String]]
  
    /**
     * Checks that all required fields are non-null.
     */
    def validate(_item: hi$result) {
    }
  
    override def encode(_item: hi$result, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): hi$result = Immutable.decode(_iprot)
  
    def apply(
      success: Option[String] = None
    ): hi$result = new Immutable(
      success
    )
  
    def unapply(_item: hi$result): Option[Option[String]] = Some(_item.success)
  
    object Immutable extends ThriftStructCodec3[hi$result] {
      override def encode(_item: hi$result, _oproto: TProtocol) { _item.write(_oproto) }
      override def decode(_iprot: TProtocol): hi$result = {
        var success: String = null
        var _got_success = false
        var _done = false
        _iprot.readStructBegin()
        while (!_done) {
          val _field = _iprot.readFieldBegin()
          if (_field.`type` == TType.STOP) {
            _done = true
          } else {
            _field.id match {
              case 0 => { /* success */
                _field.`type` match {
                  case TType.STRING => {
                    success = {
                      _iprot.readString()
                    }
                    _got_success = true
                  }
                  case _ => TProtocolUtil.skip(_iprot, _field.`type`)
                }
              }
              case _ =>
                TProtocolUtil.skip(_iprot, _field.`type`)
            }
            _iprot.readFieldEnd()
          }
        }
        _iprot.readStructEnd()
        new Immutable(
          if (_got_success) Some(success) else None
        )
      }
    }
  
    /**
     * The default read-only implementation of hi$result.  You typically should not need to
     * directly reference this class; instead, use the hi$result.apply method to construct
     * new instances.
     */
    class Immutable(
      val success: Option[String] = None
    ) extends hi$result
  
  }
  
  trait hi$result extends ThriftStruct
    with Product1[Option[String]]
    with java.io.Serializable
  {
    import hi$result._
  
  
    def success: Option[String]
  
    def _1 = success
  
  
    /**
     * If the specified field is optional, it is set to None.  Otherwise, if the field is
     * known, it is reverted to its default value; if the field is unknown, it is subtracked
     * from the passthroughFields map, if present.
     */
    def unsetField(_fieldId: Short): hi$result =
      _fieldId match {
        case 0 => copy(success = None)
        case _ => this
      }
  
    override def write(_oprot: TProtocol) {
      hi$result.validate(this)
      _oprot.writeStructBegin(Struct)
      if (success.isDefined) {
        val success_item = success.get
        _oprot.writeFieldBegin(SuccessField)
        _oprot.writeString(success_item)
        _oprot.writeFieldEnd()
      }
      _oprot.writeFieldStop()
      _oprot.writeStructEnd()
    }
  
    def copy(
      success: Option[String] = this.success
    ): hi$result =
      new Immutable(
        success
      )
  
    override def canEqual(other: Any): Boolean = other.isInstanceOf[hi$result]
  
    override def equals(other: Any): Boolean =
      _root_.scala.runtime.ScalaRunTime._equals(this, other)
  
    override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)
  
    override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)
  
  
    override def productArity: Int = 1
  
    override def productElement(n: Int): Any = n match {
      case 0 => success
      case _ => throw new IndexOutOfBoundsException(n.toString)
    }
  
    override def productPrefix: String = "hi$result"
  }

  import com.twitter.util.Future

  trait FutureIface extends  Hello[Future] {
    
    def hi(): Future[String]
  }

  class FinagledClient(
      service: com.twitter.finagle.Service[com.twitter.finagle.thrift.ThriftClientRequest, Array[Byte]],
      protocolFactory: TProtocolFactory = new TBinaryProtocol.Factory,
      serviceName: String = "",
      stats: com.twitter.finagle.stats.StatsReceiver = com.twitter.finagle.stats.NullStatsReceiver)
    extends Hello$FinagleClient(
      service,
      protocolFactory,
      serviceName,
      stats)
    with FutureIface

  class FinagledService(
      iface: FutureIface,
      protocolFactory: TProtocolFactory)
    extends Hello$FinagleService(
      iface,
      protocolFactory)
}